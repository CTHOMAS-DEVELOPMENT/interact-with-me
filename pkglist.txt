const jwt = require('jsonwebtoken');
const JWT_SECRET = 'flabyagal'; // Use an environment variable for the secret in production

// Inside your login route, after verifying the user's credentials
const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '1h' }); // Adjust expiresIn as needed
res.json({
  success: true,
  message: "Login successful.",
  userId: user.id,
  token // Send the token back to the client
});

// Inside the .then((data) => { ... }) of your fetch call in LoginForm
if (data.success) {
  localStorage.setItem('token', data.token); // Store the token
  // Navigate or perform other actions as needed
}

const token = localStorage.getItem('token');
fetch("/api/protected-route", {
  headers: {
    "Authorization": `Bearer ${token}`
  },
  // Other fetch options
});

const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your_secret_key';

function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1]; // Extract the token from the header

    if (token == null) return res.sendStatus(401); // No token provided

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) return res.sendStatus(403); // Token is invalid or expired
        req.user = user; // Add the user payload to the request
        next(); // Proceed to the next middleware or request handler
    });
}